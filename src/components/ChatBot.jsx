import React, { useState, useRef, useEffect } from 'react';
import ScaleLoader from 'react-spinners/ScaleLoader';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faMessage } from '@fortawesome/free-regular-svg-icons';
import ReactMarkdown from 'react-markdown';
import robot_img from '../assets/ic5.png';
import { sendMessageChatService } from './chatbotService';
import LinkBox from './LinkBox'; // Import component LinkBox

function ChatBot(props) {
    const messagesEndRef = useRef(null);
    const inputRef = useRef(null);
    const [timeOfRequest, setTimeOfRequest] = useState(0);
    const [promptInput, setPromptInput] = useState('');
    const [model, setModel] = useState('LegalBizAI_pro');
    const [chatHistory, setChatHistory] = useState([]);
    const [isLoading, setIsLoad] = useState(false);
    const [isGen, setIsGen] = useState(false);
    const [counter, setCounter] = useState(0);
    const [dataChat, setDataChat] = useState([
        [
            'start',
            [
                'Xin ch√†o! ƒê√¢y l√† LegalBizAI, tr·ª£ l√Ω ƒë·∫Øc l·ª±c v·ªÅ lu·∫≠t doanh nghi·ªáp c·ªßa b·∫°n! B·∫°n mu·ªën t√¨m ki·∫øm th√¥ng tin v·ªÅ ƒëi·ªÅu g√¨? ƒê·ª´ng qu√™n ch·ªçn m√¥ h√¨nh ph√π h·ª£p ƒë·ªÉ m√¨nh c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm th√¥ng tin ch√≠nh x√°c nh·∫•t nha. üòÑ',
                null,
                null
            ],
        ],
    ]);
    const models = [
        {
            value: 'LegalBizAI_pro',
            name: 'LegalBizAI Pro',
        },
        {
            value: 'LegalBizAI',
            name: 'LegalBizAI',
        },
    ];

    const commonQuestions = [
        'Doanh nghi·ªáp do Nh√† n∆∞·ªõc n·∫Øm gi·ªØ 100% v·ªën ƒëi·ªÅu l·ªá b·ªã xem x√©t gi·∫£i th·ªÉ trong c√°c tr∆∞·ªùng h·ª£p n√†o?',
        'C√°c kho·∫£n n·ª£ c·ªßa doanh nghi·ªáp t∆∞ nh√¢n gi·∫£i th·ªÉ do kinh doanh l·ªó v·ªën ƒë∆∞·ª£c thanh to√°n theo th·ª© t·ª± ∆∞u ti√™n nh∆∞ th·∫ø n√†o?',
        'Nghƒ©a v·ª• c·ªßa ƒê·∫°i h·ªôi ƒë·ªìng c·ªï ƒë√¥ng ƒë∆∞·ª£c quy ƒë·ªãnh nh∆∞ th·∫ø n√†o?',
        'Doanh nghi·ªáp ƒë∆∞·ª£c th√†nh l·∫≠p chi nh√°nh ·ªü n∆∞·ªõc ngo√†i kh√¥ng?',
        'Doanh nghi·ªáp mu·ªën c·∫•p l·∫°i GCN ƒëƒÉng k√Ω ƒë·ªãa ƒëi·ªÉm kinh doanh th√¨ n·ªôp ƒë∆°n ƒë·∫øn Ph√≤ng ƒêKKD n∆°i ƒë·∫∑t tr·ª• s·ªü ch√≠nh hay n∆°i ƒë·∫∑t ƒë·ªãa ƒëi·ªÉm kinh doanh?',
        'M·ªôt doanh nghi·ªáp do Nh√† n∆∞·ªõc n·∫Øm gi·ªØ 100% v·ªën ƒëi·ªÅu l·ªá c√≥ th·ªÉ chia t√†i s·∫£n ƒë·ªÉ th√†nh l·∫≠p bao nhi√™u doanh nghi·ªáp m·ªõi?',
        'Ti·ªÅn l∆∞∆°ng tr·∫£ cho Gi√°m ƒë·ªëc c√¥ng ty TNHH hai th√†nh vi√™n tr·ªü l√™n ƒë∆∞·ª£c ƒë∆∞·ª£c t√≠nh v√†o chi ph√≠ kinh doanh c·ªßa c√¥ng ty kh√¥ng?',
        'Khi n·ªôi dung k√™ khai trong h·ªì s∆° ƒëƒÉng k√Ω h·ªô kinh doanh l√† gi·∫£ m·∫°o th√¨ c√≥ b·ªã thu h·ªìi Gi·∫•y ch·ª©ng nh·∫≠n ƒëƒÉng k√Ω h·ªô kinh doanh kh√¥ng?',
        'Tr√°ch nhi·ªám tr·∫£ n·ª£ trong tr∆∞·ªùng h·ª£p doanh nghi·ªáp c√≥ kho·∫£n thua l·ªó l·ªõn h∆°n v·ªën ƒëi·ªÅu l·ªá (c√¥ng ty c·ªï ph·∫ßn v√† c√¥ng ty TNHH)?',
        'C√°c nguy√™n t·∫Øc n√†o c·∫ßn l∆∞u √Ω ƒë·ªÉ chuy·ªÉn ƒë·ªïi doanh nghi·ªáp do Nh√† n∆∞·ªõc n·∫Øm gi·ªØ 100% v·ªën ƒëi·ªÅu l·ªá th√†nh c√¥ng ty tr√°ch nhi·ªám h·ªØu h·∫°n hai th√†nh vi√™n tr·ªü l√™n?',
        'Ban ki·ªÉm so√°t c√¥ng ty c·ªï ph·∫ßn ph·∫£i c√≥ tr√°ch nhi·ªám th·∫©m ƒë·ªãnh t√≠nh ƒë·∫ßy ƒë·ªß, h·ª£p ph√°p v√† trung th·ª±c c·ªßa c√°c b√°o c√°o n√†o?',
        'Bi·ªán ph√°p thu h·ªìi Gi·∫•y ph√©p kinh doanh ƒë·ªëi v·ªõi doanh nghi·ªáp ƒë∆∞·ª£c √°p d·ª•ng trong tr∆∞·ªùng h·ª£p n√†o?',
    ];

    useEffect(() => {
        scrollToEndChat();
        inputRef.current.focus();
    }, [isLoading]);

    useEffect(() => {
        const interval = setInterval(() => {
            setTimeOfRequest((timeOfRequest) => timeOfRequest + 1);
        }, 1000);
        return () => clearInterval(interval);
    }, []);

    useEffect(() => {
        let interval = null;
        if (isLoading) {
            setCounter(1);
            interval = setInterval(() => {
                setCounter((prevCounter) => {
                    if (prevCounter < 30) {
                        return prevCounter + 1;
                    } else {
                        clearInterval(interval);
                        return prevCounter;
                    }
                });
            }, 1000);
        } else {
            clearInterval(interval);
        }
        return () => clearInterval(interval);
    }, [isLoading]);

    const scrollToEndChat = () => {
        messagesEndRef.current.scrollIntoView({ behavior: 'auto' });
    };

    const onChangeHandler = (event) => {
        setPromptInput(event.target.value);
    };

    const sendMessageChat = async () => {
        if (promptInput !== '' && isLoading === false) {
            setTimeOfRequest(0);
            setIsGen(true);
            setPromptInput('');
            setIsLoad(true);
            setDataChat((prev) => [...prev, ['end', [promptInput, model]]]);
            setChatHistory((prev) => [promptInput, ...prev]);

            try {
                const result = await sendMessageChatService(promptInput, model);
                setDataChat((prev) => [
                    ...prev,
                    ['start', [result.result, result.source_documents, result.references, model]],
                ]);
            } catch (error) {
                console.log(error);
                setDataChat((prev) => [
                    ...prev,
                    ['start', ['L·ªói, kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi server', null, null]],
                ]);
            } finally {
                setIsLoad(false);
                setIsGen(false);
                inputRef.current.focus();
            }
        }
    };

    const handleKeyDown = (event) => {
        if (event.key === 'Enter') {
            event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa s·ª± ki·ªán Enter
            sendMessageChat();
        }
    };

    const [reference, setReference] = useState({
        title: '',
        source: '',
        url: '',
        text: ``,
    });

    const handleReferenceClick = (source, modelType) => {
        setReference({
            title: source.metadata.title,
            source: modelType,
            url: source.metadata.url,
            text: source.page_content,
        });
    };

    return (
        <div
            className="bg-gradient-to-r from-orange-50 to-orange-100 flex flex-col"
            style={{ height: '87vh' }}
        >
            <style>
            {`
                .chat-bubble-gradient-receive {
                    background: linear-gradient(90deg, #f9c6c6 0%, #ffa98a 100%);
                    color: black;
                }
                .chat-bubble-gradient-send {
                    background: linear-gradient(90deg, #2c9fc3 0%, #2f80ed 100%);
                    color: white;
                }
                .input-primary {
                    border-color: #FFA07A;
                }
                .input-primary:focus {
                    outline: none;
                    border-color: #FF6347;
                    box-shadow: 0 0 5px #FF6347;
                }
                .btn-send {
                    background-color: #f8723c !important; 
                    border-color: #FFA07A !important; 
                }
                .btn-send:hover {
                    background-color: #ff9684 !important; 
                    border-color: #FF6347 !important; 
                }
            `}
            </style>

            {/* Dropdown for model selection on mobile */}
            <div className="lg:hidden p-2 flex justify-center bg-gradient-to-r from-orange-50 to-orange-100">
                <select
                    value={model}
                    onChange={(e) => setModel(e.target.value)}
                    className="w-3/4 p-2 border rounded-lg shadow-md bg-white"
                >
                    {models.map((model) => (
                        <option key={model.value} value={model.value}>{model.name}</option>
                    ))}
                </select>
            </div>

            <div className="hidden lg:block drawer-side absolute w-64 h-[20vh] left-3 mt-2 drop-shadow-md z-10">
                <div className="menu p-2 w-full min-h-full bg-gray-50 text-base-content rounded-2xl mt-3 overflow-auto scroll-y-auto max-h-[80vh]">
                    <ul className="menu text-sm">
                        <h2 className="font-bold mb-2 bg-[linear-gradient(90deg,hsl(var(--s))_0%,hsl(var(--sf))_9%,hsl(var(--pf))_42%,hsl(var(--p))_47%,hsl(var(--a))_100%)] bg-clip-text will-change-auto [-webkit-text-fill-color:transparent] [transform:translate3d(0,0,0)] motion-reduce:!tracking-normal max-[1280px]:!tracking-normal [@supports(color:oklch(0_0_0))]:bg-[linear-gradient(90deg,hsl(var(--s))_4%,color-mix(in_oklch,hsl(var(--sf)),hsl(var(--pf)))_22%,hsl(var(--p))_45%,color-mix(in_oklch,hsl(var(--p)),hsl(var(--a)))_67%,hsl(var(--a))_100.2%)]">
                            L·ªãch s·ª≠ tr√≤ chuy·ªán
                        </h2>
                        {chatHistory.length === 0 ? (
                            <p className="text-sm text-gray-500">
                                Hi·ªán ch∆∞a c√≥ cu·ªôc h·ªôi tho·∫°i n√†o
                            </p>
                        ) : (
                            chatHistory.map((mess, i) => (
                                <li key={i}>
                                    <p>
                                        <FontAwesomeIcon icon={faMessage} />
                                        {mess.length < 20
                                            ? mess
                                            : mess.slice(0, 20) + '...'}
                                    </p>
                                </li>
                            ))
                        )}
                    </ul>
                </div>
            </div>

            <div className="hidden lg:block drawer-side absolute w-64 h-[20vh] mt-2 right-3 drop-shadow-md z-10">
                <div className="menu p-2 w-full min-h-full bg-gray-50 text-base-content rounded-2xl mt-3">
                    <h2 className="font-bold text-sm mb-2 bg-[linear-gradient(90deg,hsl(var(--s))_0%,hsl(var(--sf))_9%,hsl(var(--pf))_42%,hsl(var(--p))_47%,hsl(var(--a))_100%)] bg-clip-text will-change-auto [-webkit-text-fill-color:transparent] [transform:translate3d(0,0,0)] motion-reduce:!tracking-normal max-[1280px]:!tracking-normal [@supports(color:oklch(0_0_0))]:bg-[linear-gradient(90deg,hsl(var(--s))_4%,color-mix(in_oklch,hsl(var(--sf)),hsl(var(--pf)))_22%,hsl(var(--p))_45%,color-mix(in_oklch,hsl(var(--p)),hsl(var(--a)))_67%,hsl(var(--a))_100.2%)]">
                        Ch·ªçn M√¥ h√¨nh
                    </h2>
                    <ul className="menu">
                        {models.map((item) => (
                            <li key={item.value}>
                                <label className="label cursor-pointer">
                                    <span className="label-text font-medium">
                                        {item.name}
                                    </span>
                                    <input
                                        type="radio"
                                        name="radio-10"
                                        value={item.value}
                                        checked={model === item.value}
                                        onChange={(e) =>
                                            setModel(e.target.value)
                                        }
                                        className="radio checked:bg-blue-500"
                                    />
                                </label>
                            </li>
                        ))}
                    </ul>
                </div>
                <div
                    className="menu p-2 w-full min-h-full bg-gray-50 text-base-content 
            rounded-2xl mt-3 overflow-auto scroll-y-auto"
                    style={{ maxHeight: '60vh' }} // Adjust this value to increase the height
                >
                    <ul className="menu text-sm">
                        <h2 className="font-bold mb-2 bg-[linear-gradient(90deg,hsl(var(--s))_0%,hsl(var(--sf))_9%,hsl(var(--pf))_42%,hsl(var(--p))_47%,hsl(var(--a))_100%)] bg-clip-text will-change-auto [-webkit-text-fill-color:transparent] [transform:translate3d(0,0,0)] motion-reduce:!tracking-normal max-[1280px]:!tracking-normal [@supports(color:oklch(0_0_0))]:bg-[linear-gradient(90deg,hsl(var(--s))_4%,color-mix(in_oklch,hsl(var(--sf)),hsl(var(--pf)))_22%,hsl(var(--p))_45%,color-mix(in_oklch,hsl(var(--p)),hsl(var(--a)))_67%,hsl(var(--a))_100.2%)]">
                            Nh·ªØng c√¢u h·ªèi ph·ªï bi·∫øn
                        </h2>

                        {commonQuestions.map((mess, i) => (
                            <li key={i} onClick={() => setPromptInput(mess)}>
                                <p className="max-w-64">
                                    <FontAwesomeIcon icon={faMessage} />
                                    {mess}
                                </p>
                            </li>
                        ))}
                    </ul>
                </div>
            </div>


            <div className="flex flex-col h-full items-center relative z-0 flex-grow">
                <div
                    id="chat-area"
                    className="
          mt-2 lg:mt-5 text-xs lg:text-sm 
          scrollbar-thin scrollbar-thumb-gray-300 bg-white  
          scrollbar-thumb-rounded-full scrollbar-track-rounded-full
          rounded-3xl border-2 md:w-[50%] md:p-3 p-1 w-full overflow-auto scroll-y-auto flex-grow"
                    style={{ maxHeight: 'calc(90vh - 91px)' }} // Adjust this value based on the footer height
                >
                    {dataChat.map((dataMessages, i) =>
                        dataMessages[0] === 'start' ? (
                            <div
                                className="chat chat-start drop-shadow-md"
                                key={i}
                            >
                                <div className="chat-image avatar">
                                    <div className="w-8 lg:w-10 rounded-full border-2 border-blue-500">
                                        <img
                                            className="scale-150"
                                            src={robot_img}
                                            alt="avatar"
                                        />
                                    </div>
                                </div>
                                <div className="chat-bubble chat-bubble-gradient-receive break-words">
                                    <ReactMarkdown>
                                        {dataMessages[1][0]}
                                    </ReactMarkdown>
                                    {dataMessages[1][1] && dataMessages[1][1].length > 0 && (
                                        <>
                                            <div className="divider m-0"></div>
                                            <LinkBox links={dataMessages[1][1]} />
                                        </>
                                    )}
                                </div>
                            </div>
                        ) : (
                            <div className="chat chat-end" key={i}>
                                <div className="chat-bubble shadow-xl chat-bubble-gradient-send">
                                    {dataMessages[1][0]}

                                    <>
                                        <div className="divider m-0"></div>
                                        <p className="font-light text-xs text-cyan-50">
                                            M√¥ h√¨nh: {dataMessages[1][1]}
                                        </p>
                                    </>
                                </div>
                            </div>
                        )
                    )}
                    {isLoading && (
                        <div className="chat chat-start">
                            <div className="chat-image avatar">
                                <div className="w-8 lg:w-10 rounded-full border-2 border-blue-500">
                                    <img src={robot_img} alt="avatar" />
                                </div>
                            </div>
                            <div className="flex justify-start px-4 py-2">
                                <div className="chat-bubble chat-bubble-gradient-receive break-words flex items-center">
                                    <ScaleLoader
                                        color="#0033ff"
                                        loading={true}
                                        height={15}
                                    />
                                    <span className="ml-2">{`${counter}/30s`}</span>{' '}
                                    {/* Hi·ªÉn th·ªã b·ªô ƒë·∫øm c√πng h√†ng */}
                                </div>
                            </div>
                        </div>
                    )}
                    <div ref={messagesEndRef} />
                </div>
                <div
                    className="grid md:w-[50%] bg-gradient-to-r from-orange-50 to-orange-100 p-1 rounded-t-lg hide-on-small-screen"
                    style={{ zIndex: 10 }}
                >
                    <input
                        type="text"
                        placeholder="Nh·∫≠p c√¢u h·ªèi t·∫°i ƒë√¢y..."
                        className="mr-1 shadow-xl border-2 focus:outline-none px-2 rounded-2xl input-primary col-start-1 md:col-end-12 col-end-11"
                        onChange={onChangeHandler}
                        onKeyDown={handleKeyDown}
                        disabled={isGen}
                        value={promptInput}
                        ref={inputRef}
                    />

                    <button
                        disabled={isGen}
                        onClick={sendMessageChat}
                        className={
                            'drop-shadow-md md:col-start-12 rounded-2xl col-start-11 col-end-12 md:col-end-13 btn btn-active btn-primary btn-square btn-send'
                        }
                    >
                        <svg
                            stroke="currentColor"
                            fill="none"
                            strokeWidth="2"
                            viewBox="0 0 24 24"
                            color="white"
                            height="15px"
                            width="15px"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <line x1="22" y1="2" x2="11" y2="13"></line>
                            <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                        </svg>
                    </button>
                    <p className="text-xs col-start-1 col-end-12 text-justify p-1">
                        <b>L∆∞u √Ω: </b>LegalBizAI c√≥ th·ªÉ m·∫Øc l·ªói. H√£y ki·ªÉm tra
                        c√°c th√¥ng tin quan tr·ªçng!
                    </p>
                </div>
            </div>
        </div>
    );
}

export default ChatBot;
